[
    {
        "ref": "https://mitflit.ro/blog/golang-paths-of-mitflit/",
        "title": "Golang Paths of Mitflit",
        "section": "blog",
        "tags": ["golang","shellvars","envvars","paths","GOBIN","GOCACHE","GOENV","GOPATH","GOROOT","modules","debian","windows"],
        "date" : "2020.11.26",
        "body": "Where I change the default paths in golang to a centralized location on disk.\nGolang paths of default Use an installer. Take note of the installation path, it becomes GOROOT. Installer will also add GOROOT/bin to the path.\nDon\u0026rsquo;t use an installer. Extract to a directory of my choice. Set GOROOT manually. Add GOROOT/bin to path manually.\nRun go env. Observe default path settings.\nThe default GOPATH is go on the user home directory. I am not to use the default GOPATH for GOROOT. I should add GOPATH/bin to path manually if GOBIN is not set.\nThe default GOBIN is GOPATH/bin. If GOBIN is set, then I should add that to path manually.\nThe default GOCAHE is in a build directory somewhere in the user home directory.\nThe default GOENV file env is stored somewhere else in the user home directory.\nGolang paths of mitflit Paths in symmetry with the environmental variables: GOROOT is go/root, GOPATH is go/path, GOBIN is go/bin. GOCACHE is go/cache, GOENV is go/env. Bonus points: modules in go/modules.\n├─ go │ ├─ bin (GOBIN, where install command deploys binaries) │ ├─ cache (GOCACHE, where cached builds await reuse) │ ├─ modules │ ├─ path (GOPATH, first workspace, where downloaded packages are) │ └─ root (GOROOT, golang installation goes here) │ env (GOENV, the golang config file) Prerequisites Downloaded golang binary release archive, tar.gz for Debian or zip for Windows, is found in the Downloads directory in the user home directory.\nPrevious golang installation or usage has been purged: target go directory has no tree structure pertaining to a default GOROOT or GOPATH.\nDebian # Check if golang shellvars or envvars are already set. set | grep GO printenv | grep GO # Create golang folders. mkdir ~/go mkdir ~/go/bin mkdir ~/go/cache mkdir ~/go/modules mkdir ~/go/path # Delete the old golang version. rmdir ~/go/root # Extract the new version. tar -C ~/go -xzf ~/Downloads/go*.tar.gz # Rename the extracted top folder. mv -T ~/go/go ~/go/root # Temporarly set the shellvars, for the current process. GOENV=~/go/env PATH=$PATH:$GOROOT/bin:$GOBIN # Temporarly set the envvars, for the current process. export GOENV export PATH # Set the envvars for future sessions. echo \u0026#34;export GOENV=$GOENV\u0026#34; \u0026gt;\u0026gt;~/.profile echo \u0026#34;export PATH=$PATH\u0026#34; \u0026gt;\u0026gt;~/.profile # Set the rest of the envvars in the env file. go env -w GOBIN=~/go/bin go env -w GOCACHE=~/go/cache go env -w GOPATH=~/go/path go env -w GOROOT=~/go/root Windows As far as I know, it\u0026rsquo;s not possible to append only to the User Paths in a simple manner, using the command line. The next best thing is to simply use the Control Panel/System GUI to add %GOROOT%\\bin and %GOBIN% to User Paths. Do that.\nREM Create golang folders. mkdir c:\\go mkdir c:\\go\\bin mkdir c:\\go\\cache mkdir c:\\go\\modules mkdir c:\\go\\path REM Delete the old golang version. rmdir c:\\go\\root REM Extract the new version. \u0026#34;%ProgramFiles%\\7-zip\\7z.exe\u0026#34; x -oc:\\go \u0026#34;%USERPROFILE%\\Downloads\\go*.zip\u0026#34; REM Rename the extracted top folder. ren c:\\go\\go root REM Temporarly set the envvars for the current session. set GOENV=c:\\go\\env set GOROOT=c:\\go\\root REM Set the envvars for future sessions. setx GOENV %GOENV% REM Set the rest of the envvars in the env file. %GOROOT%\\bin\\go env -w GOBIN=c:\\go\\bin %GOROOT%\\bin\\go env -w GOCACHE=c:\\go\\cache %GOROOT%\\bin\\go env -w GOPATH=c:\\go\\path %GOROOT%\\bin\\go env -w GOROOT=%GOROOT% Reading list How To Read and Set Environmental and Shell Variable on Linux | DigitalOcean\n"
    }
]
