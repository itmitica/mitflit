[
    {
        "ref": "https://mitflit.ro/blog/miniguides-vifm/",
        "title": "Miniguides - Vifm",
        "section": "blog",
        "tags": ["vifm","tabs","panes","directories","files","marks","tags"],
        "date" : "2020.12.01",
        "body": "\u0026ldquo;How do I work with \u0026hellip; in Vifm?\u0026rdquo; questions should have an answer below.\nRecipies Copy file name and path to clipboard # Enter command mode. : # Insert value: path to the current directory of the active pane. Ctrl+X d # Add path delimiter. / # Insert value: name of the current file of the active pane. Ctrl+X c # Edit command-line content in external editor: vim. Ctrl+G # Vim commands: use of the \u0026#34;+ special register. # Copy the top line to system clipboard. Shift+\u0026#34;++ yy Commands # Run command. :![command] # Run command and wait for keypress. :!![command] # Open external editor to prompt for command-line command. q: Tabs # Create new tab. :tabnew # Close current tab. :tabclose # or :q # but \u0026#39;q\u0026#39; closes the last tab as well.  # Switch tabs. :tabnext # or gt :tabprevious # or gT # 2nd tab 2gt Panes # Split window horizontally. Ctrl-W s # Split window vertically. Ctrl-W v # Make size of two views equal. Ctrl-W = # Maximize current view by default. Ctrl-W | # or Ctrl-W _ # Leave only one pane. Ctrl-W o # Scroll down half page. Ctrl-D # Scroll up half page. Ctrl-U # Clear and redraw the screen. Ctrl-L Directories and Files Undo, Redo # Undo last change. u # Redo last change. Ctrl-R Select # Select in normal mode. t # Enter visual select mode, clear current selection. v #or V # Save selection and go back to normal mode not moving cursor. Enter # Enter amending visual mode. Preserves current selections. av Operations Basic # Copy. yy # or Y # Paste. p # Move. P # Delete to Vifm trash. dd # Delete permanently. DD # Rename. cw # Rename w/o extension. cW Collect to register # Select directories or files in pwd. # Store selected items in a register: e.g. `a`. \u0026#34;ayy # Make another selection in pwd or in another directory. # Append them using the appropriate uppercase register: e.g. `A`. \u0026#34;A # Paste or Move the collected directories and files. p # or P # or \u0026#34;ap # or \u0026#34;Ap Other # Change attributes. cp # Clone. C Meta Info Ctrl-G Size # Select directory or file # or # select top two dots, for all objects in directory, # and calculate size. gA # Select directory or file # or # select top two dots, for all objects in directory, # and calculate size using using cached sizes ga Marks and Chars # Go to a directory or file of interest. # If directory, select the top line, the two dots at the top. # Press \u0026#39;m\u0026#39; and then a char. # Example: mark \u0026#39;~/Downloads\u0026#39; for \u0026#39;d\u0026#39;. md # To quickly navigate to a mark, # press apostrophe and then a char. # Example: jump to previsouly marked \u0026#39;~/Downloads\u0026#39;. \u0026#39;d # Example: display menu of all marks. :marks # Example: display menu of filtered marks. :marks d Marks and Tags # Mark current dir or file with tags using the bmark command. # Example: mark \u0026#39;~/go\u0026#39; with \u0026#39;go\u0026#39; and \u0026#39;golang\u0026#39; tags. :bmark go golang # Mark and tag from everywhere using the \u0026#39;bmark!\u0026#39; command. # Example: mark \u0026#39;~/go\u0026#39; with \u0026#39;go\u0026#39; and \u0026#39;golang\u0026#39; tags. :bmark! ~/go go golang # Example: display menu of all bmarks. :bmarks # Example: display menu of filtered bmarks. :bmarks golang Search Regular expressions # Forward search. /[regexp] # Open external editor to prompt for forward search pattern. q/ # Backward search. ?[regexp] # Open external editor to prompt for backward search pattern. q? # Press \u0026#39;n\u0026#39; for the next match, \u0026#39;N\u0026#39; for the previous match. First char # Forward search. f[char] # Backward search. F[char] # Press \u0026#39;;\u0026#39; for the next match, \u0026#39;,\u0026#39; for the previous match. Preview # Exit with \u0026#39;w\u0026#39;. w # Scroll with \u0026#39;Ctrl-D\u0026#39;/\u0026#39;Ctrl-U\u0026#39;. Exit with \u0026#39;q\u0026#39;. e Filter dot directories and files # Toggle visibility. za Other # Save and reset all filters. zR # Open external editor to prompt for filter pattern. q= Directories History # Go to last visited directory. :cd - # Go backwards through directory history of current view. :histprev # or default keybinding Ctrl-O # Go forward through directory history of current view. :histnext # Display a menu with list of visited directories. :history Files Reading list Vifm - Manual in Vimdoc format\n"
    }
,
    {
        "ref": "https://mitflit.ro/blog/golang-paths-of-mitflit/",
        "title": "Golang Paths of Mitflit",
        "section": "blog",
        "tags": ["golang","shellvars","envvars","paths","GOBIN","GOCACHE","GOENV","GOPATH","GOROOT","modules","debian","windows"],
        "date" : "2020.11.26",
        "body": "Where I change the default paths in golang to a centralized location on disk.\nGolang paths of default Use an installer. Take note of the installation path, it becomes GOROOT. Installer will also add GOROOT/bin to the path.\nDon\u0026rsquo;t use an installer. Extract to a directory of my choice. Set GOROOT manually. Add GOROOT/bin to path manually.\nRun go env. Observe default path settings.\nThe default GOPATH is go on the user home directory. I am not to use the default GOPATH for GOROOT. I should add GOPATH/bin to path manually if GOBIN is not set.\nThe default GOBIN is GOPATH/bin. If GOBIN is set, then I should add that to path manually.\nThe default GOCAHE is in a build directory somewhere in the user home directory.\nThe default GOENV file env is stored somewhere else in the user home directory.\nGolang paths of mitflit Paths in symmetry with the environmental variables: GOROOT is go/root, GOPATH is go/path, GOBIN is go/bin. GOCACHE is go/cache, GOENV is go/env. Bonus points: modules in go/modules.\n├─ go │ ├─ bin (GOBIN, where install command deploys binaries) │ ├─ cache (GOCACHE, where cached builds await reuse) │ ├─ modules │ ├─ path (GOPATH, first workspace, where downloaded packages are) │ └─ root (GOROOT, golang installation goes here) │ env (GOENV, the golang config file) Prerequisites Downloaded golang binary release archive, tar.gz for Debian or zip for Windows, is found in the Downloads directory in the user home directory.\nPrevious golang installation or usage has been purged: target go directory has no tree structure pertaining to a default GOROOT or GOPATH.\nDebian # Check if golang shellvars or envvars are already set. set | grep GO printenv | grep GO # Create golang folders. mkdir ~/go mkdir ~/go/bin mkdir ~/go/cache mkdir ~/go/modules mkdir ~/go/path # Delete the old golang version. rmdir ~/go/root # Extract the new version. tar -C ~/go -xzf ~/Downloads/go*.tar.gz # Rename the extracted top folder. mv -T ~/go/go ~/go/root # Temporarly set the shellvars, for the current process. GOENV=~/go/env PATH=$PATH:$GOROOT/bin:$GOBIN # Temporarly set the envvars, for the current process. export GOENV export PATH # Set the envvars for future sessions. echo \u0026#34;export GOENV=$GOENV\u0026#34; \u0026gt;\u0026gt;~/.profile echo \u0026#34;export PATH=$PATH\u0026#34; \u0026gt;\u0026gt;~/.profile # Set the rest of the envvars in the env file. go env -w GOBIN=~/go/bin go env -w GOCACHE=~/go/cache go env -w GOPATH=~/go/path go env -w GOROOT=~/go/root Windows As far as I know, it\u0026rsquo;s not possible to append only to the User Paths in a simple manner, using the command line. The next best thing is to simply use the Control Panel/System GUI to add %GOROOT%\\bin and %GOBIN% to User Paths. Do that.\nREM Create golang folders. mkdir c:\\go mkdir c:\\go\\bin mkdir c:\\go\\cache mkdir c:\\go\\modules mkdir c:\\go\\path REM Delete the old golang version. rmdir c:\\go\\root REM Extract the new version. \u0026#34;%ProgramFiles%\\7-zip\\7z.exe\u0026#34; x -oc:\\go \u0026#34;%USERPROFILE%\\Downloads\\go*.zip\u0026#34; REM Rename the extracted top folder. ren c:\\go\\go root REM Temporarly set the envvars for the current session. set GOENV=c:\\go\\env set GOROOT=c:\\go\\root REM Set the envvars for future sessions. setx GOENV %GOENV% REM Set the rest of the envvars in the env file. %GOROOT%\\bin\\go env -w GOBIN=c:\\go\\bin %GOROOT%\\bin\\go env -w GOCACHE=c:\\go\\cache %GOROOT%\\bin\\go env -w GOPATH=c:\\go\\path %GOROOT%\\bin\\go env -w GOROOT=%GOROOT% Reading list How To Read and Set Environmental and Shell Variable on Linux | DigitalOcean\n"
    }
,
    {
        "ref": "https://mitflit.ro/blog/permissions-for-files-and-directories/",
        "title": "Permissions for files and directories",
        "section": "blog",
        "tags": ["debian","permissions","font","Anonymous","vifm"],
        "date" : "2020.11.25",
        "body": "Troubleshoot checklist item #99: missing permissions on files or directories.\nA suficiently trivial task Add a custom font for the current user in Debian: Anonymous Font. Permissions for the font file are key, \u0026ldquo;otherwise it may not be usable\u0026rdquo;.\nPrerequisites Downloaded zip archive for the Anonymous Font is found in the Downloads directory in the user home directory.\nUse the command prompt # List the files in the downloaded archive. unzip -l ~/Downloads/anonymous-font.zip # Unzip the ttf file to ~/.fonts/. unzip ~/Downloads/anonymous-font.zip *.ttf -d ~/.fonts/ # Check if the font is recognized.  fc-list | grep \u0026#34;Anon\u0026#34; # Nothing listed? Check the file permissions. ls -l ~/.fonts/ | grep \u0026#34;Anon\u0026#34; # Change permissions for each category. find ~/.fonts/ -name \u0026#34;Anon*\u0026#34; | xargs chmod u=rw find ~/.fonts/ -name \u0026#34;Anon*\u0026#34; | xargs chmod g=r find ~/.fonts/ -name \u0026#34;Anon*\u0026#34; | xargs chmod o=r # Alternatively, by combining categories with similar permissions. find ~/.fonts/ -name \u0026#34;Anon*\u0026#34; | xargs chmod u=rw find ~/.fonts/ -name \u0026#34;Anon*\u0026#34; | xargs chmod go=r # Alternatively, in one go for all categories, with the numeric method: r=4, w=2, x= 1. find ~/.fonts/ -name \u0026#34;Anon*\u0026#34; | xargs chmod 644 # Rebuild cached list of fonts. fc-cache -fv # Check again if the font is recognized. fc-list | grep \u0026#34;Anon\u0026#34; Use vifm Navigate to the downloaded zip file.\nEnter command mode and issue unzip commands for archive file list and for extracting the ttf files only, if any.\n:!!unzip -l %f :!unzip %f *.ttf Navigate to the extracted files and check the file permissions displayed in the vifm status bar.\nSelect the ttf files: t or enter the visual mode v.\ncp for file properties dialog.\nSelect the rwx attributes for each category: rw for user, r for group, r for others.\nSelect the ttf files: t or enter the visual mode v.\nyyank them.\nNavigate to ~/.fonts, Paste with moving the files also (p for copy).\nRebuilding cached list of fonts is usually not neccessary when following these steps.\nCheck if the font is recognized.\n:!!fc-list | grep \u0026#34;Anon\u0026#34; Reading list Fonts - Debian Wiki\nFile permissions and attributes - ArchLinux Wiki\n"
    }
]
